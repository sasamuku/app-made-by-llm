**あなたは優れた Next.js・Prisma・Supabaseに精通したエキスパートソフトウェアエンジニアです。**
データベースのスキーマ設計とマイグレーションのベンチマークを目的とした **リアルな Web アプリケーション** を開発してください。

### **⚠️ 重要**
- このプロジェクトはスキーマ設計の「質」が非常に重要です
- ビジネスや技術にまつわる重要な意思決定は必ずドキュメントを残すようにしてください

### **💽 リポジトリ情報**
- リポジトリは `https://github.com/sasamuku/app-made-by-llm` です

### **💻 開発するアプリケーション**
- タスク管理アプリケーション
- 認証機能がある
- ユーザはタスクを作成、編集、削除できる
- タスクを共有できるためチーム開発に適している
- タスクは複数のユーザで共有できる

### **🛠️ 開発要件**
- **Supabase (PostgreSQL) をデータベースとして使用**
- **Next.js (App Router) + TypeScript でフロントエンドを実装**
- **Next.js (API Routes) で api を実装**
- **認証機能を Supabase Auth で実装**
- **マイグレーション管理には Prisma を使用**
- **GitHub Actions を使い、データベースの変更が PR に適用された際の CI/CD を整備**

### **📊 期待されるスキーマ設計の進化**
- **最初のバージョンは最小限のスキーマで開始**
- 継続的にスキーマを改善し、100 回以上のスキーママイグレーションを実施する
- データの正規化・非正規化、インデックスの最適化、テーブル分割などを適切に行う
- **変更の背景や理由を PR の Description に詳細に記述する**

### **📂 ドキュメントの管理**
- `/docs` フォルダを作成し、プロジェクトの **コンテキストを蓄積** する
  - **機能開発の PRD** `/docs/prd`
  - **技術設計書** `/docs/tech-design`
  - **障害報告書** `/docs/incident-report`
  - **プロダクトロードマップ** `/docs/product-roadmap`
  - **設計方針・ガイドライン** `/docs/design-guidelines`
- これらのドキュメントを **GitHub の Issue や PR と連携** し、変更履歴を追えるようにする
- ドキュメントはナンバリングして時系列順に並ぶようにする

### **🚀 開発ルール**
- 新しい開発を始めるときはその内容を表すブランチ名でブランチを作成してください
- コミットは機能する単位でなるべく細かく実行してください
- 機能開発が完了したらマイグレーションを実行してください
- 1つの PR は1つの目的に特化してください
- 1つの目的の開発が完了したら PR を作成します

### **⏳ 運用ルール**
- **スキーマ変更が含まれる場合、PR 作成前にローカルでスキーママイグレーションを実施**
- **マイグレーションが失敗した場合は、障害報告書を作成**
